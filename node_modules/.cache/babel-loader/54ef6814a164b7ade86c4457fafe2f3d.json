{"ast":null,"code":"var _jsxFileName = \"/Users/paulndam/Documents/CODINGDOJO/MERN/React/BlueChat_II/bluechat_ii/src/components/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\"; //creating a temp variable for our socket\n\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setname] = useState(\"\");\n  const [room, setroom] = useState(\"\");\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    //retrieving data from user while they join the chat, we do that by using the querystring and the parse it\n    // location is from react router\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // when we get our first connection we are going to set our socket to a connection\n\n    socket = io(ENDPOINT);\n    setroom(room);\n    setname(name); // socket.emit will send an event or connection to our backend server included the user name and room that we passed in as objects and on the other hand at our back it will be ready to listen to an event with the same matching words \"come on\"\n\n    socket.emit(\"come on\", {\n      name,\n      room\n    }, ({\n      error\n    }) => {\n      alert(error);\n    });\n    console.log(location.search);\n    console.log(socket);\n  }, [ENDPOINT, location.search]);\n  return /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, \"Chat Thru Bluechat\");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/paulndam/Documents/CODINGDOJO/MERN/React/BlueChat_II/bluechat_ii/src/components/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setname","room","setroom","ENDPOINT","parse","search","emit","error","alert","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAEA;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMW,QAAQ,GAAG,gBAAjB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBP,WAAW,CAACU,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CAAvB,CAHc,CAKd;;AACAT,IAAAA,MAAM,GAAGD,EAAE,CAACQ,QAAD,CAAX;AAEAD,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,OAAO,CAACD,IAAD,CAAP,CATc,CAWd;;AAEAH,IAAAA,MAAM,CAACU,IAAP,CAAY,SAAZ,EAAuB;AAAEP,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAvB,EAAuC,CAAC;AAAEM,MAAAA;AAAF,KAAD,KAAe;AACpDC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD,KAFD;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAQ,CAACO,MAArB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;AACD,GAnBQ,EAmBN,CAACO,QAAD,EAAWL,QAAQ,CAACO,MAApB,CAnBM,CAAT;AAoBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD,CA1BD;;AA2BA,eAAeR,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\n\n//creating a temp variable for our socket\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setname] = useState(\"\");\n  const [room, setroom] = useState(\"\");\n  const ENDPOINT = \"localhost:5000\";\n\n  useEffect(() => {\n    //retrieving data from user while they join the chat, we do that by using the querystring and the parse it\n    // location is from react router\n    const { name, room } = queryString.parse(location.search);\n\n    // when we get our first connection we are going to set our socket to a connection\n    socket = io(ENDPOINT);\n\n    setroom(room);\n    setname(name);\n\n    // socket.emit will send an event or connection to our backend server included the user name and room that we passed in as objects and on the other hand at our back it will be ready to listen to an event with the same matching words \"come on\"\n\n    socket.emit(\"come on\", { name, room }, ({ error }) => {\n      alert(error);\n    });\n\n    console.log(location.search);\n    console.log(socket);\n  }, [ENDPOINT, location.search]);\n  return <h3>Chat Thru Bluechat</h3>;\n};\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}